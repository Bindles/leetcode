#* 1493. Longest Subarray of 1's After Deleting One Element
#nums = [0,1,1,1,0,1,1,0,1]

require 'benchmark'

def longest_subarray_1(nums)
    ls = nums.chunk(&:itself).collect {|v| [v.first, v.last.size] }
    (hl = ls.collect(&:first).tally).default = 0
    n0, n1 = hl.values_at(0, 1)
    return 0 if n1.zero?
    return ls.filter {|(v, cnt)| v == 1 }.first.last - (n0.zero? ? 1 : 0) if n1 == 1
    ls.filter! {|v| 
        v.first == 1 || (v.first.zero? && v.last > 1) 
    }.collect {|(v, cnt)| 
        v.zero? ? 0 : cnt 
    }.each_cons(2).collect(&:sum).max
end

#*
def longest_subarray_2(nums)
    left_w, right_w, longest_arr, k = 0, 0, 0, 1
    
    while right_w < nums.length
        longest_arr = [longest_arr, right_w - left_w].max
        
        right_w += 1 if nums[right_w] == 1
        if nums[right_w] == 0 && k > 0
            right_w += 1
            k -= 1
        end
        
        if nums[right_w] == 0 && k == 0
            k += 1 if nums[left_w] == 0
            left_w += 1
        end
    end
    return longest_arr
end

#* 3
def longest_subarray_3(nums)
  left = 0;right = 0;k = 1;max = 0
  n = nums.size
  
  while right < n
    if nums[right] == 0
      k -= 1
      while k < 0
        k += 1 if nums[left] == 0
        left += 1
      end
    end
    max = [max, right - left].max
    
    right += 1
  end
  max
end


def longest_subarray_4(nums)
    left_w, right_w, longest_arr, k = 0, 0, 0, 1
    
    while right_w < nums.length
        longest_arr = [longest_arr, right_w - left_w].max
        
        right_w += 1 if nums[right_w] == 1
        if nums[right_w] == 0 && k > 0
            right_w += 1
            k -= 1
        end
        
        if nums[right_w] == 0 && k == 0
            k += 1 if nums[left_w] == 0
            left_w += 1
        end
    end
    return longest_arr
end

# Define the input nums array
nums = [0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,0]

# Benchmark the solutions
Benchmark.bm(20) do |x|
  x.report("Solution 1:") { longest_subarray_1(nums) }
  x.report("Solution 2:") { longest_subarray_2(nums) }
  x.report("Solution 3:") { longest_subarray_3(nums) }
  x.report("Solution 4:") { longest_subarray_4(nums) }
end